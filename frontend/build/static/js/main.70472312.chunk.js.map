{"version":3,"sources":["store.ts","reducers/productReducers.ts","constants/productConstants.ts","reducers/cartReducer.ts","constants/cartConstants.ts","reducers/userReducers.ts","constants/userContants.ts","reducers/orderReducers.ts","constants/orderConstants.ts","components/Footer.tsx","actions/userActions.ts","components/SearchBox.tsx","components/Header.tsx","actions/productActions.ts","components/Message.tsx","components/Loader.tsx","components/Rating.tsx","components/Product.tsx","components/Paginate.tsx","components/ProductCarousel.tsx","components/Meta.tsx","screens/HomeScreen.tsx","screens/ProductScreen.tsx","actions/cartActions.ts","screens/CartScreen.tsx","components/FormContainer.tsx","screens/LoginScreen.tsx","screens/RegisterScreen.tsx","screens/ProfileScreen.tsx","actions/orderActions.ts","components/CheckoutSteps.tsx","screens/ShippingScreen.tsx","screens/PaymentScreen.tsx","screens/PlaceOrderScreen.tsx","screens/OrderScreen.tsx","screens/UserListScreen.tsx","screens/UserEditScreen.tsx","screens/ProductListScreen.tsx","screens/ProductEditScreen.tsx","screens/OrderListScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","combineReducers","productList","state","products","action","type","loading","payload","error","productDetails","product","reviews","productDelete","success","productCreate","productUpdate","productReviewCreate","productTopRated","cart","item","existItem","cartItems","find","x","_id","map","filter","shippingAddress","paymentMethod","userLogin","userInfo","userRegister","userDetails","user","userUpdateProfile","userList","users","userDelete","userUpdate","orderCreate","order","orderDetails","orderItems","orderPay","orderDeliver","orderListMy","orders","orderList","cartItemsFromStorage","JSON","parse","localStorage","getItem","userInfoFromStorage","initialState","address","city","postalCode","country","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Footer","Container","Row","Col","className","getUserDetails","id","dispatch","getState","a","config","headers","Authorization","token","axios","get","data","response","message","withRouter","history","useState","keyword","setKeyword","Form","onSubmit","event","preventDefault","trim","push","inline","Control","name","onChange","e","target","value","placeholder","autoComplete","Button","variant","Header","useDispatch","useSelector","Navbar","bg","expand","collapseOnSelect","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","onClick","removeItem","isAdmin","listProducts","pageNumber","listProductDetails","Message","children","Alert","defaultProps","Loader","Spinner","animation","role","style","width","height","margin","display","Rating","text","color","stars","i","key","Product","Card","Img","src","image","Body","Title","as","Text","rating","numReviews","price","Paginate","pages","page","Pagination","Array","keys","active","ProductCarousel","useEffect","Carousel","pause","Image","alt","fluid","Caption","Meta","description","Helmet","content","HomeScreen","match","params","sm","md","lg","xl","ProductScreen","qty","setQty","setRating","comment","setComment","isEmptyRating","setEmptyRating","reviewSuccess","errorReview","ListGroup","countInStock","parseInt","disabled","length","review","createdAt","toString","substring","productId","post","Group","controlId","Label","rows","addToCart","setItem","stringify","CartScreen","location","Number","search","split","removeFromCartHandler","removeFromCart","rounded","reduce","acc","toFixed","FormContainer","xs","LoginScreen","email","setEmail","password","setPassword","redirect","login","RegisterScreen","setName","confirmPassword","setConfirmPassword","setMessage","register","ProfileScreen","loadingOrders","errorOrders","put","updateUserProfile","Table","striped","bordered","hover","responsive","totalPrice","isPaid","paidAt","isDelivered","deliveredAt","CheckoutSteps","step1","step2","step3","step4","ShippingScreen","setAddress","setCity","setPostalCode","setCountry","required","PaymentScreen","setPaymentMethod","method","Check","label","checked","PlaceOrderScreen","addDecimals","num","Math","round","itemsPrice","shippingPrice","taxPrice","index","createOrder","OrderScreen","orderId","sdkReady","setSdkReady","loadingPay","successPay","loadingDeliver","successDeliver","errorDeliver","addPayPalScript","clientId","script","document","createElement","async","onload","body","appendChild","window","paypal","href","amount","onSuccess","paymentResult","payOrder","deliverOrder","UserListScreen","successDelete","deleteHandler","confirm","delete","deleteUser","UserEditScreen","userId","setIsAdmin","loadingUpdate","errorUpdate","successUpdate","updateUser","ProductListScreen","loadingDelete","errorDelete","loadingCreate","errorCreate","successCreate","createdProduct","deleteProduct","category","brand","ProductEditScreen","setPrice","setImage","setBrand","setCategory","setCountInStock","setDescription","uploading","setUploading","uploadFileHandler","file","files","formData","FormData","append","console","updateProduct","File","custom","OrderListScreen","App","path","component","exact","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.70472312.chunk.js","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {\n    productListReducer,\n    productDetailsReducer,\n    productDeleteReducer,\n    productCreateReducer,\n    productUpdateReducer,\n    createReviewReducer,\n    productTopRatedReducer,\n} from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducer';\nimport {\n    userDeleteReducer,\n    userDetailsReducer,\n    userListReducer,\n    userLoginReducer,\n    userRegisterReducer,\n    userUpdateProfileReducer,\n    userUpdateReducer,\n} from './reducers/userReducers';\nimport {\n    orderCreateReducer,\n    orderDeliverReducer,\n    orderDetailsReducer,\n    orderListMyReducer,\n    orderListReducer,\n    orderPayReducer,\n} from './reducers/orderReducers';\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    productDelete: productDeleteReducer,\n    productCreate: productCreateReducer,\n    productUpdate: productUpdateReducer,\n    productReviewCreate: createReviewReducer,\n    productTopRated: productTopRatedReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer,\n    userDelete: userDeleteReducer,\n    userUpdate: userUpdateReducer,\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer,\n    orderDeliver: orderDeliverReducer,\n    orderListMy: orderListMyReducer,\n    orderList: orderListReducer,\n});\n\nexport type RootState = ReturnType<typeof reducer>;\n\nconst cartItemsFromStorage: any = JSON.parse(localStorage.getItem('cartItems')!) || [];\nconst userInfoFromStorage: any = JSON.parse(localStorage.getItem('userInfo')!) || null;\nconst shippingAddressFromStorage: any = JSON.parse(localStorage.getItem('shippingAddress')!) || {\n    address: '',\n    city: '',\n    postalCode: '',\n    country: '',\n};\n\nconst initialState = {\n    cart: { cartItems: cartItemsFromStorage, shippingAddress: shippingAddressFromStorage },\n    userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    reducer,\n    //@ts-ignore\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import {\n    PRODUCT_CREATE_FAIL,\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_RESET,\n    PRODUCT_CREATE_REVIEW_FAIL,\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_RESET,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_LIST_FAIL,\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_TOP_FAIL,\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_RESET,\n    PRODUCT_UPDATE_SUCCESS,\n} from '../constants/productConstants';\n\nexport const productListReducer = (state = { products: [] }, action: any) => {\n    switch (action.type) {\n        case PRODUCT_LIST_REQUEST:\n            return { loading: true, products: [] };\n        case PRODUCT_LIST_SUCCESS:\n            return { loading: false, ...action.payload };\n        case PRODUCT_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const productDetailsReducer = (state = { product: { reviews: [] } }, action: any) => {\n    switch (action.type) {\n        case PRODUCT_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case PRODUCT_DETAILS_SUCCESS:\n            return { loading: false, product: action.payload };\n        case PRODUCT_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const productDeleteReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case PRODUCT_DELETE_REQUEST:\n            return { ...state, loading: true };\n        case PRODUCT_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case PRODUCT_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const productCreateReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case PRODUCT_CREATE_REQUEST:\n            return { ...state, loading: true };\n        case PRODUCT_CREATE_SUCCESS:\n            return { loading: false, success: true, product: action.payload };\n        case PRODUCT_CREATE_FAIL:\n            return { loading: false, error: action.payload };\n        case PRODUCT_CREATE_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const productUpdateReducer = (state = { product: {} }, action: any) => {\n    switch (action.type) {\n        case PRODUCT_UPDATE_REQUEST:\n            return { ...state, loading: true };\n        case PRODUCT_UPDATE_SUCCESS:\n            return { loading: false, success: true, product: action.payload };\n        case PRODUCT_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case PRODUCT_UPDATE_RESET:\n            return { product: {} };\n        default:\n            return state;\n    }\n};\n\nexport const createReviewReducer = (state = { product: {} }, action: any) => {\n    switch (action.type) {\n        case PRODUCT_CREATE_REVIEW_REQUEST:\n            return { ...state, loading: true };\n        case PRODUCT_CREATE_REVIEW_SUCCESS:\n            return { loading: false, success: true };\n        case PRODUCT_CREATE_REVIEW_FAIL:\n            return { loading: false, error: action.payload };\n        case PRODUCT_CREATE_REVIEW_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const productTopRatedReducer = (state = { products: [] }, action: any) => {\n    switch (action.type) {\n        case PRODUCT_TOP_REQUEST:\n            return { loading: true, products: [] };\n        case PRODUCT_TOP_SUCCESS:\n            return { loading: false, products: action.payload };\n        case PRODUCT_TOP_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n","export const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST';\nexport const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS';\nexport const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL';\n\nexport const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST';\nexport const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS';\nexport const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL';\n\nexport const PRODUCT_DELETE_REQUEST = 'PRODUCT_DELETE_REQUEST';\nexport const PRODUCT_DELETE_SUCCESS = 'PRODUCT_DELETE_SUCCESS';\nexport const PRODUCT_DELETE_FAIL = 'PRODUCT_DELETE_FAIL';\n\nexport const PRODUCT_CREATE_REQUEST = 'PRODUCT_CREATE_REQUEST';\nexport const PRODUCT_CREATE_SUCCESS = 'PRODUCT_CREATE_SUCCESS';\nexport const PRODUCT_CREATE_FAIL = 'PRODUCT_CREATE_FAIL';\nexport const PRODUCT_CREATE_RESET = 'PRODUCT_CREATE_RESET';\n\nexport const PRODUCT_UPDATE_REQUEST = 'PRODUCT_UPDATE_REQUEST';\nexport const PRODUCT_UPDATE_SUCCESS = 'PRODUCT_UPDATE_SUCCESS';\nexport const PRODUCT_UPDATE_FAIL = 'PRODUCT_UPDATE_FAIL';\nexport const PRODUCT_UPDATE_RESET = 'PRODUCT_UPDATE_RESET';\n\nexport const PRODUCT_CREATE_REVIEW_REQUEST = 'PRODUCT_CREATE_REVIEW_REQUEST';\nexport const PRODUCT_CREATE_REVIEW_SUCCESS = 'PRODUCT_CREATE_REVIEW_SUCCESS';\nexport const PRODUCT_CREATE_REVIEW_FAIL = 'PRODUCT_CREATE_REVIEW_FAIL';\nexport const PRODUCT_CREATE_REVIEW_RESET = 'PRODUCT_CREATE_REVIEW_RESET';\n\nexport const PRODUCT_TOP_REQUEST = 'PRODUCT_TOP_REQUEST';\nexport const PRODUCT_TOP_SUCCESS = 'PRODUCT_TOP_SUCCESS';\nexport const PRODUCT_TOP_FAIL = 'PRODUCT_TOP_FAIL';\n","import {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_SAVE_PAYMENT_METHOD,\n    CART_SAVE_SHIPPING_ADDRESS,\n} from '../constants/cartConstants';\nimport ProductInterface from '../interfaces/ProductInterface';\nimport ShippingAddressInterface from '../interfaces/ShippingAddressInterface';\n\nexport const cartReducer = (\n    state: { cartItems: Array<ProductInterface>; shppingAddress: ShippingAddressInterface },\n    action: { type: string; payload: ProductInterface }\n) => {\n    switch (action.type) {\n        case CART_ADD_ITEM:\n            const item = action.payload;\n            const existItem = state.cartItems.find((x) => x._id === item._id);\n\n            if (existItem) {\n                return {\n                    ...state,\n                    cartItems: state.cartItems.map((x) => (x._id === existItem._id ? item : x)),\n                };\n            } else {\n                return {\n                    ...state,\n                    cartItems: [...state.cartItems, item],\n                };\n            }\n\n        case CART_REMOVE_ITEM:\n            return {\n                ...state,\n                cartItems: state.cartItems.filter((x) => x._id !== action.payload._id),\n            };\n\n        case CART_SAVE_SHIPPING_ADDRESS:\n            return {\n                ...state,\n                shippingAddress: action.payload,\n            };\n\n        case CART_SAVE_PAYMENT_METHOD:\n            return {\n                ...state,\n                paymentMethod: action.payload,\n            };\n\n        default:\n            return { ...state };\n    }\n};\n","export const CART_ADD_ITEM = 'CART_ADD_ITEM';\nexport const CART_REMOVE_ITEM = 'CART_REMOVE_ITEM';\nexport const CART_SAVE_SHIPPING_ADDRESS = 'CART_SAVE_SHIPPING_ADDRESS';\nexport const CART_SAVE_PAYMENT_METHOD = 'CART_SAVE_PAYMENT_METHOD';\n","import {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGOUT,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_DETAILS_RESET,\n    USER_LIST_FAIL,\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_RESET,\n    USER_DELETE_FAIL,\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_RESET,\n    USER_UPDATE_PROFILE_RESET,\n} from '../constants/userContants';\n\nexport const userLoginReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case USER_LOGIN_REQUEST:\n            return { loading: true };\n        case USER_LOGIN_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_LOGIN_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LOGOUT:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userRegisterReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case USER_REGISTER_REQUEST:\n            return { loading: true };\n        case USER_REGISTER_SUCCESS:\n            return { loading: false, userInfo: action.payload };\n        case USER_REGISTER_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const userDetailsReducer = (state = { user: {} }, action: any) => {\n    switch (action.type) {\n        case USER_DETAILS_REQUEST:\n            return { ...state, loading: true };\n        case USER_DETAILS_SUCCESS:\n            return { loading: false, user: action.payload };\n        case USER_DETAILS_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_DETAILS_RESET:\n            return { user: {} };\n        default:\n            return state;\n    }\n};\n\nexport const userUpdateProfileReducer = (state = { user: {} }, action: any) => {\n    switch (action.type) {\n        case USER_UPDATE_PROFILE_REQUEST:\n            return { ...state, loading: true };\n        case USER_UPDATE_PROFILE_SUCCESS:\n            return { loading: false, success: true, userInfo: action.payload };\n        case USER_UPDATE_PROFILE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_PROFILE_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const userListReducer = (state = { users: [] }, action: any) => {\n    switch (action.type) {\n        case USER_LIST_REQUEST:\n            return { loading: true };\n        case USER_LIST_SUCCESS:\n            return { loading: false, users: action.payload };\n        case USER_LIST_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_LIST_RESET:\n            return { users: [] };\n        default:\n            return state;\n    }\n};\n\nexport const userDeleteReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case USER_DELETE_REQUEST:\n            return { loading: true };\n        case USER_DELETE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_DELETE_FAIL:\n            return { loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const userUpdateReducer = (state = { user: {} }, action: any) => {\n    switch (action.type) {\n        case USER_UPDATE_REQUEST:\n            return { loading: true };\n        case USER_UPDATE_SUCCESS:\n            return { loading: false, success: true };\n        case USER_UPDATE_FAIL:\n            return { loading: false, error: action.payload };\n        case USER_UPDATE_RESET:\n            return { user: {} };\n        default:\n            return state;\n    }\n};\n","export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_FAIL = 'USER_LOGIN_FAIL';\nexport const USER_LOGOUT = 'USER_LOGOUT';\n\nexport const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\nexport const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\nexport const USER_REGISTER_FAIL = 'USER_REGISTER_FAIL';\n\nexport const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST';\nexport const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS';\nexport const USER_DETAILS_FAIL = 'USER_DETAILS_FAIL';\nexport const USER_DETAILS_RESET = 'USER_DETAILS_RESET';\n\nexport const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST';\nexport const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS';\nexport const USER_UPDATE_PROFILE_FAIL = 'USER_UPDATE_PROFILE_FAIL';\nexport const USER_UPDATE_PROFILE_RESET = 'USER_UPDATE_PROFILE_RESET';\n\nexport const USER_LIST_REQUEST = 'USER_LIST_REQUEST';\nexport const USER_LIST_SUCCESS = 'USER_LIST_SUCCESS';\nexport const USER_LIST_FAIL = 'USER_LIST_FAIL';\nexport const USER_LIST_RESET = 'USER_LIST_RESET';\n\nexport const USER_DELETE_REQUEST = 'USER_DELETE_REQUEST';\nexport const USER_DELETE_SUCCESS = 'USER_DELETE_SUCCESS';\nexport const USER_DELETE_FAIL = 'USER_DELETE_FAIL';\n\nexport const USER_UPDATE_REQUEST = 'USER_UPDATE_REQUEST';\nexport const USER_UPDATE_SUCCESS = 'USER_UPDATE_SUCCESS';\nexport const USER_UPDATE_FAIL = 'USER_UPDATE_FAIL';\nexport const USER_UPDATE_RESET = 'USER_UPDATE_RESET';\n","import {\n    ORDER_CREATE_FAIL,\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_RESET,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DETAILS_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_LIST_FAIL,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_RESET,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_RESET,\n    ORDER_PAY_SUCCESS,\n} from '../constants/orderConstants';\n\nexport const orderCreateReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case ORDER_CREATE_REQUEST:\n            return {\n                loading: true,\n            };\n        case ORDER_CREATE_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n                order: action.payload,\n            };\n        case ORDER_CREATE_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const orderDetailsReducer = (\n    state = { loading: true, orderItems: [], shippingAddress: {} },\n    action: any\n) => {\n    switch (action.type) {\n        case ORDER_DETAILS_REQUEST:\n            return {\n                ...state,\n                loading: true,\n            };\n        case ORDER_DETAILS_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n                order: action.payload,\n            };\n        case ORDER_DETAILS_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const orderPayReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case ORDER_PAY_REQUEST:\n            return {\n                loading: true,\n            };\n        case ORDER_PAY_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n            };\n        case ORDER_PAY_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        case ORDER_PAY_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n\nexport const orderListMyReducer = (state = { orders: [] }, action: any) => {\n    switch (action.type) {\n        case ORDER_LIST_MY_REQUEST:\n            return {\n                loading: true,\n            };\n        case ORDER_LIST_MY_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n                orders: action.payload,\n            };\n        case ORDER_LIST_MY_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        case ORDER_LIST_MY_RESET:\n            return { orders: [] };\n        default:\n            return state;\n    }\n};\n\nexport const orderListReducer = (state = { orders: [] }, action: any) => {\n    switch (action.type) {\n        case ORDER_LIST_REQUEST:\n            return {\n                loading: true,\n            };\n        case ORDER_LIST_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n                orders: action.payload,\n            };\n        case ORDER_LIST_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const orderDeliverReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case ORDER_DELIVER_REQUEST:\n            return {\n                loading: true,\n            };\n        case ORDER_DELIVER_SUCCESS:\n            return {\n                loading: false,\n                success: true,\n            };\n        case ORDER_DELIVER_FAIL:\n            return {\n                loading: false,\n                error: action.payload,\n            };\n        case ORDER_DELIVER_RESET:\n            return {};\n        default:\n            return state;\n    }\n};\n","export const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST';\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS';\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL';\n\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST';\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS';\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL';\n\nexport const ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST';\nexport const ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS';\nexport const ORDER_PAY_FAIL = 'ORDER_PAY_FAIL';\nexport const ORDER_PAY_RESET = 'ORDER_PAY_RESET';\n\nexport const ORDER_LIST_MY_REQUEST = 'ORDER_LIST_MY_REQUEST';\nexport const ORDER_LIST_MY_SUCCESS = 'ORDER_LIST_MY_SUCCESS';\nexport const ORDER_LIST_MY_FAIL = 'ORDER_LIST_MY_FAIL';\nexport const ORDER_LIST_MY_RESET = 'ORDER_LIST_MY_RESET';\n\nexport const ORDER_LIST_REQUEST = 'ORDER_LIST_REQUEST';\nexport const ORDER_LIST_SUCCESS = 'ORDER_LIST_SUCCESS';\nexport const ORDER_LIST_FAIL = 'ORDER_LIST_FAIL';\n\nexport const ORDER_DELIVER_REQUEST = 'ORDER_DELIVER_REQUEST';\nexport const ORDER_DELIVER_SUCCESS = 'ORDER_DELIVER_SUCCESS';\nexport const ORDER_DELIVER_FAIL = 'ORDER_DELIVER_FAIL';\nexport const ORDER_DELIVER_RESET = 'ORDER_DELIVER_RESET';\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst Footer: React.FC = () => {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className='text-center py-3'>Copyright &copy; ProShop</Col>\n                </Row>\n            </Container>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport {\n    USER_DELETE_FAIL,\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_RESET,\n    USER_DETAILS_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_REQUEST,\n    USER_LIST_RESET,\n    USER_LIST_SUCCESS,\n    USER_LOGIN_FAIL,\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGOUT,\n    USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n} from '../constants/userContants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\n\nexport const login = (email: string, password: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        });\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        const { data } = await axios.post('/api/users/login', { email, password, config });\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        });\n\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (err) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const logout = () => (dispatch: Dispatch) => {\n    localStorage.removeItem('userInfo');\n    dispatch({ type: USER_LOGOUT });\n    dispatch({ type: USER_DETAILS_RESET });\n    dispatch({ type: ORDER_LIST_MY_RESET });\n    dispatch({ type: USER_LIST_RESET });\n};\n\nexport const register = (name: string, email: string, password: string) => async (\n    dispatch: Dispatch\n) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        });\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n\n        const { data } = await axios.post('/api/users', { name, email, password }, config);\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data,\n        });\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        });\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (err) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const getUserDetails = (id: string) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const updateUserProfile = (user: any) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.put('/api/users/profile', user, config);\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data,\n        });\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        });\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch (err) {\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const listUsers = () => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get('/api/users', config);\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const deleteUser = (id: string) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: USER_DELETE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        await axios.delete(`/api/users/${id}`, config);\n\n        dispatch({\n            type: USER_DELETE_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: USER_DELETE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const updateUser = (user: any) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.put(`/api/users/${user._id}`, user, config);\n\n        dispatch({\n            type: USER_UPDATE_SUCCESS,\n        });\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data,\n        });\n        dispatch({ type: USER_DETAILS_RESET });\n    } catch (err) {\n        dispatch({\n            type: USER_UPDATE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n","import React, { FC, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nconst SearchBox: FC<RouteComponentProps> = ({ history }) => {\n    const [keyword, setKeyword] = useState('');\n\n    const submitHandler = (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        if (keyword.trim()) {\n            history.push(`/search/${keyword}`);\n        } else {\n            history.push('/');\n        }\n    };\n\n    return (\n        <Form onSubmit={submitHandler} inline>\n            <Form.Control\n                type='text'\n                name='q'\n                onChange={(e) => setKeyword(e.target.value)}\n                placeholder='Search Products...'\n                className='mr-sm-2 ml-sm-5'\n                autoComplete='off'\n            ></Form.Control>\n            <Button type='submit' variant='outline-success' className='p-2'>\n                Search\n            </Button>\n        </Form>\n    );\n};\n\nexport default withRouter(SearchBox);\n","import React from 'react';\nimport { Navbar, Nav, Container, NavDropdown } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { logout } from '../actions/userActions';\nimport SearchBox from './SearchBox';\n\nconst Header: React.FC = () => {\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const logoutHandler = () => {\n        dispatch(logout());\n    };\n\n    return (\n        <header>\n            <Navbar bg='dark' variant='dark' expand='lg' collapseOnSelect>\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand>ProShop</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls='basic-navbar-nav' />\n                    <Navbar.Collapse id='basic-navbar-nav'>\n                        <SearchBox />\n                        <Nav className='ml-auto'>\n                            <LinkContainer to='/cart'>\n                                <Nav.Link>\n                                    <i className='fas fa-shopping-cart'></i>Cart\n                                </Nav.Link>\n                            </LinkContainer>\n\n                            {userInfo ? (\n                                <NavDropdown title={userInfo.name} id='username'>\n                                    <LinkContainer to='/profile'>\n                                        <NavDropdown.Item>Profile</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <NavDropdown.Item onClick={logoutHandler}>\n                                        Logout\n                                    </NavDropdown.Item>\n                                </NavDropdown>\n                            ) : (\n                                <LinkContainer to='/login'>\n                                    <Nav.Link>\n                                        <i className='fas fa-user'></i> Sign In\n                                    </Nav.Link>\n                                </LinkContainer>\n                            )}\n                            {userInfo && userInfo.isAdmin && (\n                                <NavDropdown title='Admin' id='adminmenu'>\n                                    <LinkContainer to='/admin/userlist'>\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to='/admin/productlist'>\n                                        <NavDropdown.Item>Products</NavDropdown.Item>\n                                    </LinkContainer>\n                                    <LinkContainer to='/admin/orderlist'>\n                                        <NavDropdown.Item>Orders</NavDropdown.Item>\n                                    </LinkContainer>\n                                </NavDropdown>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </header>\n    );\n};\n\nexport default Header;\n","import {\n    PRODUCT_CREATE_FAIL,\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_REVIEW_FAIL,\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_DELETE_FAIL,\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_LIST_FAIL,\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_TOP_FAIL,\n    PRODUCT_TOP_REQUEST,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_UPDATE_FAIL,\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_SUCCESS,\n} from '../constants/productConstants';\nimport axios from 'axios';\nimport { Dispatch } from 'redux';\n\nexport const listProducts = (keyword = '', pageNumber = '') => async (\n    dispatch: (arg0: { type: string; payload?: Object }) => void\n) => {\n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST });\n\n        const { data } = await axios.get(\n            `/api/products/?keyword=${keyword}&pageNumber=${pageNumber}`\n        );\n\n        dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_LIST_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const listProductDetails = (id: any) => async (\n    dispatch: (arg0: { type: string; payload?: Object }) => void\n) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST });\n        const { data } = await axios.get(`/api/products/${id}`);\n        dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const deleteProduct = (id: string) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: PRODUCT_DELETE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        await axios.delete(`/api/products/${id}`, config);\n\n        dispatch({\n            type: PRODUCT_DELETE_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_DELETE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const createProduct = () => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.post('/api/products', {}, config);\n\n        dispatch({\n            type: PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_CREATE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\n// should change product back to ProductInterface\nexport const updateProduct = (product: any) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: PRODUCT_UPDATE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.put(`/api/products/${product._id}`, product, config);\n\n        dispatch({\n            type: PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_UPDATE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const createReview = (productId: string, review: any) => async (\n    dispatch: Dispatch,\n    getState: any\n) => {\n    try {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        await axios.post(`/api/products/${productId}/reviews`, review, config);\n\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_CREATE_REVIEW_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const listTopProducts = () => async (\n    dispatch: (arg0: { type: string; payload?: Object }) => void\n) => {\n    try {\n        dispatch({ type: PRODUCT_TOP_REQUEST });\n\n        const { data } = await axios.get('/api/products/top');\n\n        dispatch({ type: PRODUCT_TOP_SUCCESS, payload: data });\n    } catch (err) {\n        dispatch({\n            type: PRODUCT_TOP_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\ninterface Props {\n    variant?: string;\n}\n\nconst Message: React.FC<Props> = ({ variant, children }) => {\n    return <Alert variant={variant}>{children}</Alert>;\n};\n\nMessage.defaultProps = {\n    variant: 'info',\n};\n\nexport default Message;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nconst Loader: React.FC = () => {\n    return (\n        <Spinner\n            animation='border'\n            role='status'\n            style={{ width: '100px', height: '100px', margin: 'auto', display: 'block' }}\n        >\n            <span className='sr-only'>Loading...</span>\n        </Spinner>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\n\ninterface Props {\n    value: number;\n    text?: string;\n    color?: string;\n}\n\nconst Rating: React.FC<Props> = ({ value, text, color }) => {\n    let stars: Array<JSX.Element> = [];\n    for (let i = 0; i < 5; i++) {\n        stars.push(\n            <span key={i}>\n                <i\n                    style={{ color }}\n                    className={\n                        value >= i + 1\n                            ? 'fas fa-star'\n                            : value >= i + 0.5\n                            ? 'fas fa-star-half-alt'\n                            : 'far fa-star'\n                    }\n                ></i>\n            </span>\n        );\n    }\n\n    return (\n        <div className='Rating'>\n            {stars} <br /> <span>{text && text}</span>\n        </div>\n    );\n};\n\nRating.defaultProps = {\n    color: '#f8e825',\n};\n\nexport default Rating;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Rating from './Rating';\n\ninterface Props {\n    product: {\n        _id: string;\n        name: string;\n        image: string;\n        description: string;\n        brand: string;\n        category: string;\n        price: number;\n        countInStock: number;\n        rating: number;\n        numReviews: number;\n    };\n}\n\nconst Product: React.FC<Props> = ({ product }) => {\n    return (\n        <Card className='my-3 p-3 rounded'>\n            <Link to={`/product/${product._id}`}>\n                <Card.Img src={product.image} variant='top' />\n            </Link>\n            <Card.Body>\n                <Link to={`/product/${product._id}`}>\n                    <Card.Title as='div'>\n                        <strong>{product.name}</strong>\n                    </Card.Title>\n                </Link>\n\n                <Card.Text as='div'>\n                    <Rating value={product.rating} text={`${product.numReviews} reviews`} />\n                </Card.Text>\n\n                <Card.Text as='h3'>${product.price}</Card.Text>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default Product;\n","import React, { FC } from 'react';\nimport { Pagination } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\ninterface Props {\n    pages: number;\n    page: number;\n    isAdmin?: boolean;\n    keyword?: string;\n}\n\nconst Paginate: FC<Props> = ({ pages, page, isAdmin = false, keyword = '' }) => {\n    return pages > 1 ? (\n        <Pagination>\n            {[...Array(pages).keys()].map((x) => (\n                <LinkContainer\n                    key={x + 1}\n                    to={\n                        !isAdmin\n                            ? keyword\n                                ? `/search/${keyword}/page/${x + 1}`\n                                : `/page/${x + 1}`\n                            : `/admin/productlist/${x + 1}`\n                    }\n                >\n                    <Pagination.Item active={x + 1 === page}>{x + 1}</Pagination.Item>\n                </LinkContainer>\n            ))}\n        </Pagination>\n    ) : (\n        <div></div>\n    );\n};\n\nexport default Paginate;\n","import React, { FC, useEffect } from 'react';\nimport { Carousel, Image } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { listTopProducts } from '../actions/productActions';\nimport ProductInterface from '../interfaces/ProductInterface';\nimport Loader from './Loader';\nimport Message from './Message';\n\nconst ProductCarousel: FC = () => {\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const productTopRated = useSelector((state) => state.productTopRated);\n    const { loading, error, products } = productTopRated;\n\n    useEffect(() => {\n        dispatch(listTopProducts());\n    }, [dispatch]);\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n        <Carousel pause='hover' className='bg-dark'>\n            {products.map((product: ProductInterface) => (\n                <Carousel.Item key={product._id}>\n                    <Link to={`/product/${product._id}`}>\n                        <Image src={product.image} alt={product.name} fluid />\n                        <Carousel.Caption className='carousel-caption'>\n                            <h2>\n                                {product.name} (${product.price})\n                            </h2>\n                        </Carousel.Caption>\n                    </Link>\n                </Carousel.Item>\n            ))}\n        </Carousel>\n    );\n};\n\nexport default ProductCarousel;\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet';\n\ninterface Props {\n    title?: string;\n    description?: string;\n}\n\nconst defaultProps: Props = {\n    title: 'Welcome To ProShop',\n    description: 'eCommerce portfolio project',\n};\n\nconst Meta: FC<Props> = ({ title, description }) => {\n    return (\n        <Helmet>\n            <title>{title}</title>\n            <meta name='description' content={description} />\n        </Helmet>\n    );\n};\n\nMeta.defaultProps = defaultProps;\n\nexport default Meta;\n","import React, { useEffect } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { listProducts } from '../actions/productActions';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport Product from '../components/Product';\nimport ProductInterface from '../interfaces/ProductInterface';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport Paginate from '../components/Paginate';\nimport ProductCarousel from '../components/ProductCarousel';\nimport Meta from '../components/Meta';\n\nconst HomeScreen: React.FC<RouteComponentProps> = ({ match }) => {\n    //@ts-ignore\n    const keyword = match.params.keyword;\n\n    //@ts-ignore\n    const pageNumber = match.params.pageNumber || 1;\n\n    const dispatch: Dispatch<any> = useDispatch();\n\n    //@ts-ignore\n    const productList = useSelector((state) => state.productList);\n    const { loading, error, products, pages, page } = productList;\n    useEffect(() => {\n        dispatch(listProducts(keyword, pageNumber));\n    }, [dispatch, keyword, pageNumber]);\n\n    return (\n        <>\n            <Meta />\n            <div className='mt-3'>\n                {!keyword ? (\n                    <ProductCarousel />\n                ) : (\n                    <Link to='/' className='btn btn-light'>\n                        Go Back\n                    </Link>\n                )}\n            </div>\n            <h1 className='mt-3'>Latest Products</h1>\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <>\n                    <Row>\n                        {products.map((product: ProductInterface) => (\n                            <Col sm={12} md={6} lg={4} xl={3} key={product._id}>\n                                <Product product={product} />\n                            </Col>\n                        ))}\n                    </Row>\n                    <Paginate pages={pages} page={page} keyword={keyword ? keyword : ''} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default HomeScreen;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, ListGroup, Row, Image, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Rating from '../components/Rating';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createReview, listProductDetails } from '../actions/productActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ReviewInterface from '../interfaces/ReviewInterface';\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants';\nimport Meta from '../components/Meta';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst ProductScreen: React.FC<Props> = ({ history, match }) => {\n    const [qty, setQty] = useState<number>(0);\n    const [rating, setRating] = useState<number>(0);\n    const [comment, setComment] = useState<string>('');\n    const [isEmptyRating, setEmptyRating] = useState<boolean>(false);\n\n    const dispatch: Dispatch = useDispatch();\n\n    //@ts-ignore\n    const productDetails = useSelector((state) => state.productDetails);\n    const { loading, error, product } = productDetails;\n\n    //@ts-ignore\n    const productReviewCreate = useSelector((state) => state.productReviewCreate);\n    const { success: reviewSuccess, error: errorReview } = productReviewCreate;\n\n    //@ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    useEffect(() => {\n        if (reviewSuccess) {\n            // alert('Review Submitted!');\n            setRating(0);\n            setComment('');\n            setEmptyRating(false);\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET });\n        }\n        //@ts-ignore\n        dispatch(listProductDetails(match.params.id));\n    }, [dispatch, match, reviewSuccess]);\n\n    const addToCartHandler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`);\n    };\n\n    const submitHandler = (event: React.FormEvent<HTMLElement>) => {\n        event.preventDefault();\n        if (rating === 0) {\n            setEmptyRating(true);\n        } else {\n            //@ts-ignore\n            dispatch(createReview(match.params.id, { rating, comment }));\n        }\n    };\n\n    return (\n        <>\n            <Link className='btn btn-light my-3' to='/'>\n                Go Back\n            </Link>\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <>\n                    <Meta title={product.name} description={product.description} />\n                    <Row>\n                        <Col md={6}>\n                            <Image src={product.image} alt={product.name} fluid />\n                        </Col>\n                        <Col md={3}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <h3>{product.name}</h3>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <Rating\n                                        value={product.rating}\n                                        text={`${product.numReviews} reviews`}\n                                    />\n                                </ListGroup.Item>\n                                <ListGroup.Item>Price: ${product.price}</ListGroup.Item>\n                                <ListGroup.Item>Description: {product.description}</ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                        <Col md={3}>\n                            <Card>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Price:</Col>\n                                            <Col>\n                                                <strong>${product.price}</strong>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                                <ListGroup variant='flush'>\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Status:</Col>\n                                            <Col>\n                                                <strong>\n                                                    {product.countInStock > 0\n                                                        ? 'In Stock'\n                                                        : 'Out Of Stock'}\n                                                </strong>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                    {product.countInStock > 0 && (\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Qty</Col>\n                                                <Col>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={qty}\n                                                        onChange={(e) =>\n                                                            setQty(parseInt(e.target.value))\n                                                        }\n                                                    >\n                                                        {[\n                                                            ...Array(product.countInStock).keys(),\n                                                        ].map((x) => (\n                                                            <option key={x + 1} value={x + 1}>\n                                                                {x + 1}\n                                                            </option>\n                                                        ))}\n                                                    </Form.Control>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    )}\n\n                                    <ListGroup.Item>\n                                        <Button\n                                            onClick={addToCartHandler}\n                                            className='btn-block'\n                                            type='button'\n                                            disabled={product.countInStock === 0}\n                                        >\n                                            Add To Cart\n                                        </Button>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <h2>Reviews</h2>\n                            {product.reviews.length === 0 && <Message>No Reviews</Message>}\n                            <ListGroup variant='flush'>\n                                {product.reviews.map((review: ReviewInterface) => (\n                                    <ListGroup.Item key={review._id}>\n                                        <strong>{review.name}</strong>\n                                        <Rating value={review.rating} />\n                                        <p>{review.createdAt.toString().substring(0, 100)}</p>\n                                        <p>{review.comment}</p>\n                                    </ListGroup.Item>\n                                ))}\n                                <ListGroup.Item>\n                                    <h2>Write a Customer Review</h2>\n                                    {errorReview && (\n                                        <Message variant='danger'>{errorReview}</Message>\n                                    )}\n                                    {isEmptyRating && (\n                                        <Message variant='danger'>Please Select a Rating</Message>\n                                    )}\n                                    {userInfo ? (\n                                        <Form onSubmit={submitHandler}>\n                                            <Form.Group controlId='rating'>\n                                                <Form.Label>Rating</Form.Label>\n                                                <Form.Control\n                                                    as='select'\n                                                    value={rating}\n                                                    onChange={(e: any) => setRating(e.target.value)}\n                                                >\n                                                    <option value='0'>Select...</option>\n                                                    <option value='1'>1 - Poor</option>\n                                                    <option value='2'>2 - Fair</option>\n                                                    <option value='3'>3 - Good</option>\n                                                    <option value='4'>4 - Very Good</option>\n                                                    <option value='5'>5 - Excellent</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                            <Form.Group controlId='comment'>\n                                                <Form.Label>Comment</Form.Label>\n                                                <Form.Control\n                                                    as='textarea'\n                                                    rows={3}\n                                                    value={comment}\n                                                    onChange={(e) => setComment(e.target.value)}\n                                                ></Form.Control>\n                                            </Form.Group>\n                                            <Button type='submit' variant='primary'>\n                                                Submit\n                                            </Button>\n                                        </Form>\n                                    ) : (\n                                        <Message>\n                                            Please <Link to='/login'>Sign In</Link> to write a\n                                            review\n                                        </Message>\n                                    )}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default ProductScreen;\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport {\n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_SAVE_SHIPPING_ADDRESS,\n    CART_SAVE_PAYMENT_METHOD,\n} from '../constants/cartConstants';\nimport ProductInterface from '../interfaces/ProductInterface';\nimport ShippingAddressInterface from '../interfaces/ShippingAddressInterface';\n\nexport const addToCart = (id: string, qty: number) => async (dispatch: Dispatch, getState: any) => {\n    const { data } = await axios.get(`/api/products/${id}`);\n    dispatch({\n        type: CART_ADD_ITEM,\n        payload: { ...data, qty },\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n\nexport const removeFromCart = (item: ProductInterface) => (dispatch: Dispatch, getState: any) => {\n    dispatch({\n        type: CART_REMOVE_ITEM,\n        payload: item,\n    });\n\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n\nexport const saveShippingAddress = (data: ShippingAddressInterface) => (dispatch: Dispatch) => {\n    dispatch({\n        type: CART_SAVE_SHIPPING_ADDRESS,\n        payload: data,\n    });\n\n    localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\n\nexport const savePaymentMethod = (method: string) => (dispatch: Dispatch) => {\n    dispatch({\n        type: CART_SAVE_PAYMENT_METHOD,\n        payload: method,\n    });\n\n    localStorage.setItem('paymentMethod', JSON.stringify(method));\n};\n","import React, { useEffect } from 'react';\nimport { Button, Card, Col, Form, Image, ListGroup, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { addToCart, removeFromCart } from '../actions/cartActions';\nimport Message from '../components/Message';\nimport ProductInterface from '../interfaces/ProductInterface';\n\ninterface Props extends RouteComponentProps<any> {\n    /* other props for ChildComponent */\n}\n\nconst CartScreen: React.FC<Props> = ({ match, location, history }) => {\n    const productId = match.params.id;\n\n    const qty = Number(location.search.split('=')[1]) || 1;\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const cart = useSelector((state) => state.cart);\n    const { cartItems } = cart;\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty));\n        }\n    }, [dispatch, productId, qty]);\n\n    const removeFromCartHandler = (item: ProductInterface) => {\n        dispatch(removeFromCart(item));\n    };\n\n    const checkOutHandler = () => {\n        history.push('/login?redirect=shipping');\n    };\n\n    return (\n        <Row>\n            <Col md={8}>\n                <h1 className='mt-3'>Shopping Cart</h1>\n                {cartItems.length === 0 ? (\n                    <Message>\n                        Your cart is empty <Link to='/'>Go Back</Link>{' '}\n                    </Message>\n                ) : (\n                    <ListGroup variant='flush'>\n                        {cartItems.map((item: ProductInterface) => (\n                            <ListGroup.Item key={item._id}>\n                                <Row>\n                                    <Col md={2}>\n                                        <Image src={item.image} alt={item.name} fluid rounded />\n                                    </Col>\n                                    <Col md={3}>\n                                        <Link to={`/product/${item._id}`}>{item.name}</Link>\n                                    </Col>\n                                    <Col md={2}>${item.price}</Col>\n                                    <Col md={2}>\n                                        <Form.Control\n                                            as='select'\n                                            value={item.qty}\n                                            onChange={(e) =>\n                                                dispatch(\n                                                    addToCart(item._id, Number(e.target.value))\n                                                )\n                                            }\n                                        >\n                                            {[...Array(item.countInStock).keys()].map((x) => (\n                                                <option key={x + 1} value={x + 1}>\n                                                    {x + 1}\n                                                </option>\n                                            ))}\n                                        </Form.Control>\n                                    </Col>\n\n                                    <Col md={2}>\n                                        <Button\n                                            type='button'\n                                            variant='light'\n                                            onClick={() => removeFromCartHandler(item)}\n                                        >\n                                            <i className='fas fa-trash'></i>\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                )}\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>\n                                Subtotal (\n                                {cartItems.reduce(\n                                    (acc: number, item: ProductInterface) => acc + item.qty!,\n                                    0\n                                )}\n                                ) items\n                            </h2>\n                            $\n                            {cartItems\n                                .reduce(\n                                    (acc: number, item: ProductInterface) =>\n                                        acc + item.qty! * item.price,\n                                    0\n                                )\n                                .toFixed(2)}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Button\n                                type='button'\n                                className='btn-block'\n                                disabled={cartItems === 0}\n                                onClick={checkOutHandler}\n                            >\n                                Proceed To Checkout\n                            </Button>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\nexport default CartScreen;\n","import React, { FC } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst FormContainer: FC = ({ children }) => {\n    return (\n        <Container>\n            <Row className='justify-content-md-center'>\n                <Col xs={12} md={6}>\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default FormContainer;\n","import React, { FC, useState, useEffect, FormEvent } from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { login } from '../actions/userActions';\nimport FormContainer from '../components/FormContainer';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst LoginScreen: FC<Props> = ({ location, history }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const userLogin: any = useSelector((state) => state.userLogin);\n    const { loading, error, userInfo } = userLogin;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect);\n        }\n    }, [history, userInfo, redirect]);\n\n    const submitHandler = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch(login(email, password));\n    };\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Enter email'\n                        value={email}\n                        onChange={(e: any) => setEmail(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Enter password'\n                        value={password}\n                        onChange={(e: any) => setPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n                <Button type='submit' variant='primary'>\n                    Sign In\n                </Button>\n            </Form>\n            <Row className='py-3'>\n                <Col>\n                    New Customer?{' '}\n                    <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}>\n                        Register\n                    </Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    );\n};\n\nexport default LoginScreen;\n","import React, { FC, useState, useEffect, FormEvent } from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { register } from '../actions/userActions';\nimport FormContainer from '../components/FormContainer';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst RegisterScreen: FC<Props> = ({ location, history }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState<string | null>(null);\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const userRegister: any = useSelector((state) => state.userRegister);\n    const { loading, error, userInfo } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect);\n        }\n    }, [history, userInfo, redirect]);\n\n    const submitHandler = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match');\n        } else {\n            dispatch(register(name, email, password));\n        }\n    };\n\n    return (\n        <FormContainer>\n            <h1>Sign Up</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={(e: any) => setName(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Enter email'\n                        value={email}\n                        onChange={(e: any) => setEmail(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Enter password'\n                        value={password}\n                        onChange={(e: any) => setPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='confirmPassword'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Confirm Password'\n                        value={confirmPassword}\n                        onChange={(e: any) => setConfirmPassword(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n            </Form>\n            <Row className='py-3'>\n                <Col>\n                    Have an Account?{' '}\n                    <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>Login</Link>\n                </Col>\n            </Row>\n        </FormContainer>\n    );\n};\n\nexport default RegisterScreen;\n","import React, { FC, useState, useEffect, FormEvent } from 'react';\nimport { Button, Col, Form, Row, Table } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { listMyOrders } from '../actions/orderActions';\nimport { getUserDetails, updateUserProfile } from '../actions/userActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userContants';\nimport OrderInterface from '../interfaces/OrderInterface';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst ProfileScreen: FC<Props> = ({ history }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [message, setMessage] = useState<string | null>(null);\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const userDetails: any = useSelector((state) => state.userDetails);\n    const { loading, error, user } = userDetails;\n\n    // @ts-ignore\n    const userLogin: any = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    // @ts-ignore\n    const userUpdateProfile: any = useSelector((state) => state.userUpdateProfile);\n    const { success } = userUpdateProfile;\n\n    // @ts-ignore\n    const orderListMy: any = useSelector((state) => state.orderListMy);\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        } else {\n            if (!user.name || !user || success) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET });\n                dispatch(getUserDetails('profile'));\n                dispatch(listMyOrders());\n            } else {\n                setName(user.name);\n                setEmail(user.email);\n            }\n        }\n    }, [history, userInfo, dispatch, user, success]);\n\n    const submitHandler = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            setMessage('Passwords do not match');\n        } else {\n            dispatch(updateUserProfile({ id: user._id, name, email, password }));\n        }\n    };\n\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {success && <Message variant='success'>Profile Update</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            type='text'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e: any) => setName(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            type='email'\n                            placeholder='Enter email'\n                            value={email}\n                            onChange={(e: any) => setEmail(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Enter password'\n                            value={password}\n                            onChange={(e: any) => setPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='confirmPassword'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={confirmPassword}\n                            onChange={(e: any) => setConfirmPassword(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                    </Button>\n                </Form>\n            </Col>\n            <Col md={9}>\n                <h2>My Orders</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                    <Table striped bordered hover responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>DATE</th>\n                                <th>TOTAL</th>\n                                <th>PAID</th>\n                                <th>DELIVERED</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {orders.map((order: OrderInterface) => (\n                                <tr key={order._id}>\n                                    <td>{order._id}</td>\n                                    <td>{order.createdAt.substring(0, 10)}</td>\n                                    <td>${order.totalPrice}</td>\n                                    <td>\n                                        {order.isPaid ? (\n                                            order.paidAt.substring(0, 10)\n                                        ) : (\n                                            <i className='fas fa-times' style={{ color: 'red' }} />\n                                        )}\n                                    </td>\n                                    <td>\n                                        {order.isDelivered ? (\n                                            order.deliveredAt.substring(0, 10)\n                                        ) : (\n                                            <i className='fas fa-times' style={{ color: 'red' }} />\n                                        )}\n                                    </td>\n                                    <td>\n                                        <LinkContainer to={`/order/${order._id}`}>\n                                            <Button className='btn-sm' variant='light'>\n                                                Details\n                                            </Button>\n                                        </LinkContainer>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                )}\n            </Col>\n        </Row>\n    );\n};\n\nexport default ProfileScreen;\n","import { Dispatch } from 'redux';\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n    ORDER_DETAILS_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_REQUEST,\n    ORDER_PAY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_FAIL,\n    ORDER_LIST_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n} from '../constants/orderConstants';\nimport axios from 'axios';\nimport OrderInterface from '../interfaces/OrderInterface';\n\nexport const createOrder = (order: any) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.post('/api/orders', order, config);\n\n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const getOrderDetails = (id: any) => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get(`/api/orders/${id}`, config);\n\n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const payOrder = (orderId: string, paymentResult: any) => async (\n    dispatch: Dispatch,\n    getState: any\n) => {\n    try {\n        dispatch({\n            type: ORDER_PAY_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, config);\n\n        dispatch({\n            type: ORDER_PAY_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_PAY_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const listMyOrders = () => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_MY_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get('/api/orders/myorders', config);\n\n        dispatch({\n            type: ORDER_LIST_MY_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_LIST_MY_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const listOrders = () => async (dispatch: Dispatch, getState: any) => {\n    try {\n        dispatch({\n            type: ORDER_LIST_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.get('/api/orders', config);\n\n        dispatch({\n            type: ORDER_LIST_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_LIST_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n\nexport const deliverOrder = (order: OrderInterface) => async (\n    dispatch: Dispatch,\n    getState: any\n) => {\n    try {\n        dispatch({\n            type: ORDER_DELIVER_REQUEST,\n        });\n\n        const {\n            userLogin: { userInfo },\n        } = getState();\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        };\n\n        const { data } = await axios.put(`/api/orders/${order._id}/deliver`, {}, config);\n\n        dispatch({\n            type: ORDER_DELIVER_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        dispatch({\n            type: ORDER_DELIVER_FAIL,\n            payload:\n                err.response && err.response.data.message ? err.response.data.message : err.message,\n        });\n    }\n};\n","import React, { FC } from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\ninterface Props {\n    step1?: boolean;\n    step2?: boolean;\n    step3?: boolean;\n    step4?: boolean;\n}\n\nconst CheckoutSteps: FC<Props> = ({ step1, step2, step3, step4 }) => {\n    return (\n        <Nav className='justify-content-center mb-4'>\n            <Nav.Item>\n                {step1 ? (\n                    <LinkContainer to='/login'>\n                        <Nav.Link>Sign In</Nav.Link>\n                    </LinkContainer>\n                ) : (\n                    <Nav.Link disabled>Sign In</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step2 ? (\n                    <LinkContainer to='/shipping'>\n                        <Nav.Link>Shipping</Nav.Link>\n                    </LinkContainer>\n                ) : (\n                    <Nav.Link disabled>Shipping</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step3 ? (\n                    <LinkContainer to='/payment'>\n                        <Nav.Link>Payment</Nav.Link>\n                    </LinkContainer>\n                ) : (\n                    <Nav.Link disabled>Payment</Nav.Link>\n                )}\n            </Nav.Item>\n\n            <Nav.Item>\n                {step4 ? (\n                    <LinkContainer to='/placeorder'>\n                        <Nav.Link>Place Order</Nav.Link>\n                    </LinkContainer>\n                ) : (\n                    <Nav.Link disabled>Place Order</Nav.Link>\n                )}\n            </Nav.Item>\n        </Nav>\n    );\n};\n\nexport default CheckoutSteps;\n","import React, { FC, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { saveShippingAddress } from '../actions/cartActions';\nimport FormContainer from '../components/FormContainer';\nimport ShippingAddressInterface from '../interfaces/ShippingAddressInterface';\nimport CheckOutSteps from '../components/CheckoutSteps';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst ShippingScreen: FC<Props> = ({ history }) => {\n    //@ts-ignore\n    const cart = useSelector((state) => state.cart);\n    const shippingAddress: ShippingAddressInterface = cart.shippingAddress;\n\n    const [address, setAddress] = useState(shippingAddress.address);\n    const [city, setCity] = useState(shippingAddress.city);\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\n    const [country, setCountry] = useState(shippingAddress.country);\n\n    const dispatch = useDispatch();\n\n    const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        dispatch(saveShippingAddress({ address, city, postalCode, country }));\n        history.push('/payment');\n    };\n\n    return (\n        <FormContainer>\n            <CheckOutSteps step1 step2 />\n            <h1>Shipping</h1>\n            <form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter address'\n                        value={address}\n                        required\n                        onChange={(e: any) => setAddress(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter city'\n                        value={city}\n                        required\n                        onChange={(e: any) => setCity(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Postal Code</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter postal code'\n                        value={postalCode}\n                        required\n                        onChange={(e: any) => setPostalCode(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Country</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Enter country'\n                        value={country}\n                        required\n                        onChange={(e: any) => setCountry(e.target.value)}\n                    ></Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </form>\n        </FormContainer>\n    );\n};\n\nexport default ShippingScreen;\n","import React, { FC, useState } from 'react';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { savePaymentMethod } from '../actions/cartActions';\nimport FormContainer from '../components/FormContainer';\nimport ShippingAddressInterface from '../interfaces/ShippingAddressInterface';\nimport CheckOutSteps from '../components/CheckoutSteps';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst PaymentScreen: FC<Props> = ({ history }) => {\n    //@ts-ignore\n    const cart = useSelector((state) => state.cart);\n    const shippingAddress: ShippingAddressInterface = cart.shippingAddress;\n\n    if (shippingAddress.address === '') {\n        history.push('/shipping');\n    }\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal');\n\n    const dispatch = useDispatch();\n\n    const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        dispatch(savePaymentMethod(paymentMethod));\n        history.push('/placeorder');\n    };\n\n    return (\n        <FormContainer>\n            <CheckOutSteps step1 step2 step3 />\n            <h1>Payment Method</h1>\n            <form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>Select Method</Form.Label>\n\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='PayPal'\n                            name='paymentMethod'\n                            value='PayPal'\n                            checked\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setPaymentMethod(e.target.value)\n                            }\n                        ></Form.Check>\n                        {/* <Form.Check\n                            type='radio'\n                            label='Stripe'\n                            id='Stripe'\n                            name='paymentMethod'\n                            value='Stripe'\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                setPaymentMethod(e.target.value)\n                            }\n                        ></Form.Check>{' '} */}\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Continue\n                </Button>\n            </form>\n        </FormContainer>\n    );\n};\n\nexport default PaymentScreen;\n","import React, { FC, useEffect } from 'react';\nimport { Col, ListGroup, Row, Image, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { createOrder } from '../actions/orderActions';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport Message from '../components/Message';\nimport ProductInterface from '../interfaces/ProductInterface';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst PlaceOrderScreen: FC<Props> = ({ history }) => {\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const cart = useSelector((state) => state.cart);\n\n    const addDecimals = (num: number) => (Math.round(num * 100) / 100).toFixed(2);\n\n    cart.itemsPrice = addDecimals(\n        cart.cartItems.reduce(\n            (acc: number, item: ProductInterface) => acc + item.price * item.qty!,\n            0\n        )\n    );\n\n    cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 10);\n    cart.taxPrice = addDecimals(Number(0.13 * cart.itemsPrice));\n\n    cart.totalPrice = addDecimals(\n        Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)\n    );\n\n    //@ts-ignore\n    const orderCreate = useSelector((state) => state.orderCreate);\n    const { order, success, error } = orderCreate;\n    useEffect(() => {\n        if (success) {\n            history.push(`/order/${order._id}`);\n        }\n    }, [history, success]);\n\n    const placeOrderHandler = () => {\n        dispatch(\n            createOrder({\n                orderItems: cart.cartItems,\n                shippingAddress: cart.shippingAddress,\n                paymentMethod: cart.paymentMethod,\n                itemsPrice: cart.itemsPrice,\n                shippingPrice: cart.shippingPrice,\n                taxPrice: cart.taxPrice,\n                totalPrice: cart.totalPrice,\n            })\n        );\n    };\n\n    return (\n        <>\n            <CheckoutSteps step1 step2 step3 step4 />\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <p>\n                                <strong>Address: </strong>\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\n                                {cart.shippingAddress.postalCode}, {cart.shippingAddress.country}\n                            </p>\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <strong>Method: </strong>\n                            {cart.paymentMethod}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            {cart.cartItems.length === 0 ? (\n                                <Message>Your cart it empty</Message>\n                            ) : (\n                                <ListGroup variant='flush'>\n                                    {cart.cartItems.map((item: ProductInterface, index: number) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image\n                                                        src={item.image}\n                                                        alt={item.name}\n                                                        fluid\n                                                        rounded\n                                                    />\n                                                </Col>\n                                                <Col>\n                                                    <Link to={`/product${item._id}`}>\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                <Col md={4}>\n                                                    {item.qty} x ${item.price} = $\n                                                    {item.qty! * item.price}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${cart.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>${cart.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${cart.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${cart.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                {error && <Message variant='danger'>{error}</Message>}\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Button\n                                    type='button'\n                                    className='btn-block'\n                                    disabled={cart.cartItems === 0}\n                                    onClick={placeOrderHandler}\n                                >\n                                    Place Order\n                                </Button>\n                            </ListGroup.Item>\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default PlaceOrderScreen;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Col, ListGroup, Row, Image, Card, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { deliverOrder, getOrderDetails, payOrder } from '../actions/orderActions';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport ProductInterface from '../interfaces/ProductInterface';\nimport axios from 'axios';\nimport { ORDER_DELIVER_RESET, ORDER_PAY_RESET } from '../constants/orderConstants';\n\ninterface Props extends RouteComponentProps<any> {}\n\nconst OrderScreen: FC<Props> = ({ match, history }) => {\n    const orderId = match.params.id;\n\n    const [sdkReady, setSdkReady] = useState(false);\n\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    //@ts-ignore\n    const orderDetails = useSelector((state) => state.orderDetails);\n    const { order, loading, error } = orderDetails;\n\n    //@ts-ignore\n    const orderPay = useSelector((state) => state.orderPay);\n    const { loading: loadingPay, success: successPay } = orderPay;\n\n    //@ts-ignore\n    const orderDeliver = useSelector((state) => state.orderDeliver);\n    const { loading: loadingDeliver, success: successDeliver, error: errorDeliver } = orderDeliver;\n\n    if (!loading) {\n        const addDecimals = (num: number) => (Math.round(num * 100) / 100).toFixed(2);\n\n        order.itemsPrice = addDecimals(\n            order.orderItems.reduce(\n                (acc: number, item: ProductInterface) => acc + item.price * item.qty!,\n                0\n            )\n        );\n    }\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login');\n        }\n\n        const addPayPalScript = async () => {\n            const { data: clientId } = await axios.get('/api/config/paypal');\n            const script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n            script.async = true;\n            script.onload = () => {\n                setSdkReady(true);\n            };\n            document.body.appendChild(script);\n        };\n\n        if (!order || successPay || successDeliver) {\n            dispatch({ type: ORDER_PAY_RESET });\n            dispatch({ type: ORDER_DELIVER_RESET });\n            dispatch(getOrderDetails(orderId));\n        } else if (!order.isPaid) {\n            // @ts-ignore\n            if (!window.paypal) {\n                addPayPalScript();\n            } else {\n                setSdkReady(true);\n            }\n        }\n    }, [order, orderId, dispatch, successPay, successDeliver]);\n\n    const successPaymentHandler = (paymentResult: any) => {\n        dispatch(payOrder(orderId, paymentResult));\n    };\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order));\n    };\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message variant='danger'>{error}</Message>\n    ) : (\n        <>\n            <h1>Order {order._id}</h1>\n            {loadingDeliver && <Loader />}\n            {errorDeliver && <Message variant='danger'>{errorDeliver}</Message>}\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <p>\n                                <strong>Name: </strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email: </strong>\n                                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n                            </p>\n                            <p>\n                                <strong>Address: </strong>\n                                {order.shippingAddress.address}, {order.shippingAddress.city},{' '}\n                                {order.shippingAddress.postalCode}, {order.shippingAddress.country}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant='success'>\n                                    Delivered on {order.deliveredAt}\n                                </Message>\n                            ) : (\n                                <Message variant='danger'>Not Delivered</Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Payment Method</h2>\n                            <p>\n                                <strong>Method: </strong>\n                                {order.paymentMethod}\n                            </p>\n                            {order.isPaid ? (\n                                <Message variant='success'>Paid on {order.paidAt}</Message>\n                            ) : (\n                                <Message variant='danger'>Not Paid</Message>\n                            )}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <h2>Order Items</h2>\n                            {order.orderItems.length === 0 ? (\n                                <Message>Your order it empty</Message>\n                            ) : (\n                                <ListGroup variant='flush'>\n                                    {order.orderItems.map(\n                                        (item: ProductInterface, index: number) => (\n                                            <ListGroup.Item key={index}>\n                                                <Row>\n                                                    <Col md={1}>\n                                                        <Image\n                                                            src={item.image}\n                                                            alt={item.name}\n                                                            fluid\n                                                            rounded\n                                                        />\n                                                    </Col>\n                                                    <Col>\n                                                        <Link to={`/product${item._id}`}>\n                                                            {item.name}\n                                                        </Link>\n                                                    </Col>\n                                                    <Col md={4}>\n                                                        {item.qty} x ${item.price} = $\n                                                        {item.qty! * item.price}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        )\n                                    )}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant='flush'>\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${order.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>${order.shippingPrice.toFixed(2)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${order.taxPrice.toFixed(2)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${order.totalPrice.toFixed(2)}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && (\n                                <ListGroup.Item>\n                                    {loadingPay && <Loader />}\n                                    {!sdkReady ? (\n                                        <Loader />\n                                    ) : (\n                                        <PayPalButton\n                                            amount={order.totalPrice}\n                                            onSuccess={successPaymentHandler}\n                                        />\n                                    )}\n                                </ListGroup.Item>\n                            )}\n\n                            {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                                <ListGroup.Item>\n                                    <Button\n                                        type='button'\n                                        className='btn btn-block'\n                                        onClick={deliverHandler}\n                                    >\n                                        Mark as Delivered\n                                    </Button>\n                                </ListGroup.Item>\n                            )}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderScreen;\n","import React, { FC, useEffect } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { deleteUser, listUsers } from '../actions/userActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport UserInterface from '../interfaces/UserInterface';\n\nconst UserListScreen: FC<RouteComponentProps> = ({ history }) => {\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const userList = useSelector((state) => state.userList);\n    const { loading, error, users } = userList;\n\n    //@ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    //@ts-ignore\n    const userDelete = useSelector((state) => state.userDelete);\n    const { success: successDelete } = userDelete;\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers());\n        } else {\n            history.push('/login');\n        }\n    }, [dispatch, history, userInfo, successDelete]);\n\n    const deleteHandler = (id: string) => {\n        if (window.confirm('Are you sure?')) dispatch(deleteUser(id));\n    };\n\n    return (\n        <>\n            <h1>Users</h1>\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>NAME</th>\n                            <th>EMAIL</th>\n                            <th>ADMIN</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {users.map((user: UserInterface) => (\n                            <tr key={user._id}>\n                                <td>{user._id}</td>\n                                <td>{user.name}</td>\n                                <td>\n                                    <a href={`mailto:${user.email}`}>{user.email}</a>\n                                </td>\n                                <td>\n                                    {user.isAdmin ? (\n                                        <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                    ) : (\n                                        <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                    )}\n                                </td>\n                                <td>\n                                    <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                        <Button variant='light' className='btn-sm'>\n                                            <i className='fas fa-edit'></i>\n                                        </Button>\n                                    </LinkContainer>\n                                    <Button\n                                        variant='danger'\n                                        className='btn-sm'\n                                        onClick={() => deleteHandler(user._id)}\n                                    >\n                                        <i className='fas fa-trash'></i>\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n        </>\n    );\n};\n\nexport default UserListScreen;\n","import React, { FC, useState, useEffect, FormEvent } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport FormContainer from '../components/FormContainer';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { USER_UPDATE_RESET } from '../constants/userContants';\n\nconst UserEditScreen: FC<RouteComponentProps> = ({ match, history }) => {\n    //@ts-ignore\n    const userId = match.params.id;\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [isAdmin, setIsAdmin] = useState(false);\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const userDetails: any = useSelector((state) => state.userDetails);\n    const { loading, error, user } = userDetails;\n\n    // @ts-ignore\n    const userUpdate: any = useSelector((state) => state.userUpdate);\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate;\n\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch({ type: USER_UPDATE_RESET });\n            history.push('/admin/userlist');\n        } else {\n            if (!user.name || user._id !== userId) {\n                dispatch(getUserDetails(userId));\n            } else {\n                setName(user.name);\n                setEmail(user.email);\n                setIsAdmin(user.isAdmin);\n            }\n        }\n    }, [dispatch, history, user, userId, successUpdate]);\n\n    const submitHandler = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch(updateUser({ _id: userId, name, email, isAdmin }));\n    };\n\n    return (\n        <>\n            <Link to='/admin/userlist' className='btn btn-light my-3'>\n                Go Back\n            </Link>\n            <FormContainer>\n                <h1>Edit User</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                {loading ? (\n                    <Loader />\n                ) : error ? (\n                    <Message variant='danger'>{error}</Message>\n                ) : (\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter name'\n                                value={name}\n                                onChange={(e: any) => setName(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='email'>\n                            <Form.Label>Email Address</Form.Label>\n                            <Form.Control\n                                type='email'\n                                placeholder='Enter email'\n                                value={email}\n                                onChange={(e: any) => setEmail(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='isadmin'>\n                            <Form.Check\n                                type='checkbox'\n                                label='Is Admin'\n                                checked={isAdmin}\n                                onChange={(e: any) => setIsAdmin(e.target.checked)}\n                            ></Form.Check>\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'>\n                            Update\n                        </Button>\n                    </Form>\n                )}\n            </FormContainer>\n        </>\n    );\n};\n\nexport default UserEditScreen;\n","import React, { FC, useEffect } from 'react';\nimport { Table, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { createProduct, deleteProduct, listProducts } from '../actions/productActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Paginate from '../components/Paginate';\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants';\nimport ProductInterface from '../interfaces/ProductInterface';\n\nconst ProductListScreen: FC<RouteComponentProps> = ({ history, match }) => {\n    //@ts-ignore\n    const pageNumber = match.params.pageNumber || 1;\n\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const productList = useSelector((state) => state.productList);\n    const { loading, error, products, pages, page } = productList;\n\n    //@ts-ignore\n    const productDelete = useSelector((state) => state.productDelete);\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete;\n\n    //@ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    //@ts-ignore\n    const productCreate = useSelector((state) => state.productCreate);\n    const {\n        loading: loadingCreate,\n        error: errorCreate,\n        success: successCreate,\n        product: createdProduct,\n    } = productCreate;\n\n    useEffect(() => {\n        dispatch({ type: PRODUCT_CREATE_RESET });\n\n        if (!userInfo.isAdmin) {\n            history.push('/login');\n        }\n\n        if (successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`);\n        } else {\n            dispatch(listProducts('', pageNumber));\n        }\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber]);\n\n    const deleteHandler = (id: string) => {\n        if (window.confirm('Are you sure?')) dispatch(deleteProduct(id));\n    };\n\n    const createProductHandler = () => {\n        dispatch(createProduct());\n    };\n\n    return (\n        <>\n            <Row className='align-items-center'>\n                <Col>\n                    <h1>Products</h1>\n                </Col>\n                <Col className='text-right'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fa fas-plus'></i> Create Product\n                    </Button>\n                </Col>\n            </Row>\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <>\n                    <Table striped bordered hover responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>NAME</th>\n                                <th>PRICE</th>\n                                <th>CATEGORY</th>\n                                <th>BRAND</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {products.map((product: ProductInterface) => (\n                                <tr key={product._id}>\n                                    <td>{product._id}</td>\n                                    <td>{product.name}</td>\n                                    <td>${product.price}</td>\n                                    <td>{product.category}</td>\n                                    <td>{product.brand}</td>\n                                    <td>\n                                        <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                            <Button variant='light' className='btn-sm'>\n                                                <i className='fas fa-edit'></i>\n                                            </Button>\n                                        </LinkContainer>\n                                        <Button\n                                            variant='danger'\n                                            className='btn-sm'\n                                            onClick={() => deleteHandler(product._id)}\n                                        >\n                                            <i className='fas fa-trash'></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                    <Paginate pages={pages} page={page} isAdmin />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default ProductListScreen;\n","import React, { FC, useState, useEffect, FormEvent } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { listProductDetails, updateProduct } from '../actions/productActions';\nimport FormContainer from '../components/FormContainer';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants';\nimport axios from 'axios';\n\nconst ProductEditScreen: FC<RouteComponentProps> = ({ match, history }) => {\n    //@ts-ignore\n    const productId = match.params.id;\n\n    const [name, setName] = useState('');\n    const [price, setPrice] = useState(0);\n    const [image, setImage] = useState('');\n    const [brand, setBrand] = useState('');\n    const [category, setCategory] = useState('');\n    const [countInStock, setCountInStock] = useState(0);\n    const [description, setDescription] = useState('');\n    const [uploading, setUploading] = useState(false);\n\n    const dispatch = useDispatch();\n\n    // @ts-ignore\n    const productDetails: any = useSelector((state) => state.productDetails);\n    const { loading, error, product } = productDetails;\n\n    // @ts-ignore\n    const productUpdate: any = useSelector((state) => state.productUpdate);\n    const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate;\n\n    // @ts-ignore\n    // const userUpdate: any = useSelector((state) => state.userUpdate);\n    // const { loading: loadingUpdate, error: errorUpdate, success: successUpdate } = userUpdate;\n\n    useEffect(() => {\n        if (successUpdate) {\n            dispatch({ type: PRODUCT_UPDATE_RESET });\n            history.push('/admin/productlist');\n        } else {\n            if (!product.name || product._id !== productId) {\n                dispatch(listProductDetails(productId));\n            } else {\n                setName(product.name);\n                setPrice(product.price);\n                setImage(product.image);\n                setBrand(product.brand);\n                setCategory(product.category);\n                setCountInStock(product.countInStock);\n                setDescription(product.description);\n            }\n        }\n    }, [dispatch, history, productId, product, successUpdate]);\n\n    const submitHandler = (e: FormEvent<HTMLElement>) => {\n        e.preventDefault();\n        dispatch(\n            updateProduct({\n                _id: productId,\n                name,\n                price,\n                brand,\n                category,\n                countInStock,\n                description,\n                image,\n            })\n        );\n    };\n\n    const uploadFileHandler = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files![0];\n        const formData = new FormData();\n        formData.append('image', file);\n        setUploading(true);\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            };\n\n            const { data } = await axios.post('/api/upload', formData, config);\n\n            setImage(data);\n            setUploading(false);\n        } catch (error) {\n            console.error(error);\n            setUploading(false);\n        }\n    };\n\n    return (\n        <>\n            <Link to='/admin/productlist' className='btn btn-light my-3'>\n                Go Back\n            </Link>\n            <FormContainer>\n                <h1>Edit Product</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n                {loading ? (\n                    <Loader />\n                ) : error ? (\n                    <Message variant='danger'>{error}</Message>\n                ) : (\n                    <Form onSubmit={submitHandler}>\n                        <Form.Group controlId='name'>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type='name'\n                                placeholder='Enter name'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='price'>\n                            <Form.Label>Price</Form.Label>\n                            <Form.Control\n                                type='number'\n                                placeholder='Enter price'\n                                value={price}\n                                onChange={(e) => setPrice(Number(e.target.value))}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='image'>\n                            <Form.Label>Image</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter image url'\n                                value={image}\n                                onChange={(e) => setImage(e.target.value)}\n                            ></Form.Control>\n                            <Form.File\n                                id='image-file'\n                                label='Choose File'\n                                custom\n                                onChange={uploadFileHandler}\n                            ></Form.File>\n                            {uploading && <Loader />}\n                        </Form.Group>\n\n                        <Form.Group controlId='brand'>\n                            <Form.Label>Brand</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter brand'\n                                value={brand}\n                                onChange={(e) => setBrand(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='countInStock'>\n                            <Form.Label>Count In Stock</Form.Label>\n                            <Form.Control\n                                type='number'\n                                placeholder='Enter countInStock'\n                                value={countInStock}\n                                onChange={(e) => setCountInStock(Number(e.target.value))}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='category'>\n                            <Form.Label>Category</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter category'\n                                value={category}\n                                onChange={(e) => setCategory(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Form.Group controlId='description'>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder='Enter description'\n                                value={description}\n                                onChange={(e) => setDescription(e.target.value)}\n                            ></Form.Control>\n                        </Form.Group>\n\n                        <Button type='submit' variant='primary'>\n                            Update\n                        </Button>\n                    </Form>\n                )}\n            </FormContainer>\n        </>\n    );\n};\n\nexport default ProductEditScreen;\n","import React, { FC, useEffect } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { listOrders } from '../actions/orderActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport OrderInterface from '../interfaces/OrderInterface';\nimport UserInterface from '../interfaces/UserInterface';\n\nconst OrderListScreen: FC<RouteComponentProps> = ({ history }) => {\n    const dispatch = useDispatch();\n\n    //@ts-ignore\n    const orderList = useSelector((state) => state.orderList);\n    const { loading, error, orders } = orderList;\n\n    //@ts-ignore\n    const userLogin = useSelector((state) => state.userLogin);\n    const { userInfo } = userLogin;\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listOrders());\n        } else {\n            history.push('/login');\n        }\n    }, [dispatch, history, userInfo]);\n\n    return (\n        <>\n            <h1>Orders</h1>\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>USER</th>\n                            <th>DATE</th>\n                            <th>TOTAL</th>\n                            <th>PAID</th>\n                            <th>DELIVERED</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {orders.map((order: OrderInterface) => (\n                            <tr key={order._id}>\n                                <td>{order._id}</td>\n                                <td>{order.user.name}</td>\n                                <td>{order.createdAt}</td>\n                                <td>${order.totalPrice}</td>\n                                <td>\n                                    {order.isPaid ? (\n                                        order.paidAt.substring(0, 10)\n                                    ) : (\n                                        <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                    )}\n                                </td>\n                                <td>\n                                    {order.isDelivered ? (\n                                        order.deliveredAt.substring(0, 10)\n                                    ) : (\n                                        <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                    )}\n                                </td>\n                                <td>\n                                    <LinkContainer to={`/order/${order._id}`}>\n                                        <Button variant='light' className='btn-sm'>\n                                            Details\n                                        </Button>\n                                    </LinkContainer>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n        </>\n    );\n};\n\nexport default OrderListScreen;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport HomeScreen from './screens/HomeScreen';\nimport ProductScreen from './screens/ProductScreen';\nimport CartScreen from './screens/CartScreen';\nimport LoginScreen from './screens/LoginScreen';\nimport RegisterScreen from './screens/RegisterScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport ShippingScreen from './screens/ShippingScreen';\nimport PaymentScreen from './screens/PaymentScreen';\nimport PlaceOrderScreen from './screens/PlaceOrderScreen';\nimport OrderScreen from './screens/OrderScreen';\nimport UserListScreen from './screens/UserListScreen';\nimport UserEditScreen from './screens/UserEditScreen';\nimport ProductListScreen from './screens/ProductListScreen';\nimport ProductEditScreen from './screens/ProductEditScreen';\nimport OrderListScreen from './screens/OrderListScreen';\n\nfunction App() {\n    return (\n        <Router>\n            <Header />\n            <main>\n                <Container>\n                    <Route path='/login' component={LoginScreen} />\n                    <Route path='/order/:id' component={OrderScreen} />\n                    <Route path='/shipping' component={ShippingScreen} />\n                    <Route path='/payment' component={PaymentScreen} />\n                    <Route path='/placeorder' component={PlaceOrderScreen} />\n                    <Route path='/register' component={RegisterScreen} />\n                    <Route path='/profile' component={ProfileScreen} />\n                    <Route path='/product/:id' component={ProductScreen} />\n                    <Route path='/cart/:id?' component={CartScreen} />\n                    <Route path='/admin/userlist' component={UserListScreen} />\n                    <Route path='/admin/user/:id/edit' component={UserEditScreen} />\n                    <Route path='/admin/productlist' component={ProductListScreen} exact />\n                    <Route\n                        path='/admin/productlist/:pageNumber'\n                        component={ProductListScreen}\n                        exact\n                    />\n                    <Route path='/admin/orderlist' component={OrderListScreen} />\n                    <Route path='/admin/product/:id/edit' component={ProductEditScreen} />\n                    <Route path='/search/:keyword' component={HomeScreen} exact />\n                    <Route path='/page/:pageNumber' component={HomeScreen} exact />\n                    <Route path='/search/:keyword/page/:pageNumber' component={HomeScreen} exact />\n                    <Route path='/' component={HomeScreen} exact />\n                </Container>\n            </main>\n            <Footer />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}